// Code generated by go-bindata.
// sources:
// assets/settings.yml
// assets/template.md
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsSettingsYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\xcd\xc1\x6a\xc3\x30\x0c\x80\xe1\x7b\x9e\x42\xd0\xeb\x1c\x65\x3d\xec\x90\xeb\xba\xde\x76\xdb\x0b\x68\xb5\xe2\x9a\xc5\x56\xb0\xd4\x8e\x52\xfa\xee\x73\x3c\x0a\xb9\x18\x83\xa4\xef\x77\xce\x75\x3b\x38\x90\xf1\x51\x4a\x22\x1b\x41\x99\x61\x6a\x7f\x8b\x39\x00\x19\x9c\xcd\x16\x1d\x11\x83\xcc\x94\x43\x2f\x25\xe0\xf2\x13\xd0\x62\x62\xdc\x7d\xd5\xb7\xff\xbf\xed\xb6\xcc\xa7\xe4\x17\xd8\x0f\xc3\x9b\x1b\x5e\xdd\xb0\xaf\x91\x0f\x1f\x4d\xca\x7b\xf2\x23\x9c\x24\x25\xca\x1e\x4c\xe0\xa2\x2d\x07\x5c\xa7\x6b\xcf\xce\x0c\x3e\x52\xb9\x75\x9b\x7d\xbc\x68\xc1\xef\x98\xf1\x1a\x13\xdc\xef\xd0\x1f\xd6\x8d\x63\x9c\x19\x1e\x8f\x95\xce\xa7\x72\x5b\x6a\x75\xd5\x08\x16\x52\xfd\x95\xd2\x7c\xce\xe8\xb9\x4d\x1b\xad\x95\x64\x0f\x57\x2e\x1a\x25\x83\x4c\xdb\xe0\x53\x99\x68\x56\xee\xfe\x02\x00\x00\xff\xff\x93\x3e\x17\x9c\x1b\x01\x00\x00")

func assetsSettingsYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSettingsYml,
		"assets/settings.yml",
	)
}

func assetsSettingsYml() (*asset, error) {
	bytes, err := assetsSettingsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/settings.yml", size: 283, mode: os.FileMode(420), modTime: time.Unix(1445076433, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsTemplateMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\xa8\xae\x56\xd0\x73\x49\x2c\x49\x55\xa8\xad\xe5\xe2\x52\x56\x56\x08\xc9\x48\x55\x70\xcf\xcf\x4f\xe1\xe2\xd2\x55\xd0\xd3\xd3\x83\x8b\x39\x25\x62\x08\x85\xa6\xe7\x54\xc2\xc4\x00\x01\x00\x00\xff\xff\xf8\xac\x73\xea\x49\x00\x00\x00")

func assetsTemplateMdBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplateMd,
		"assets/template.md",
	)
}

func assetsTemplateMd() (*asset, error) {
	bytes, err := assetsTemplateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/template.md", size: 73, mode: os.FileMode(420), modTime: time.Unix(1445074594, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/settings.yml": assetsSettingsYml,
	"assets/template.md": assetsTemplateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"settings.yml": &bintree{assetsSettingsYml, map[string]*bintree{
		}},
		"template.md": &bintree{assetsTemplateMd, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

